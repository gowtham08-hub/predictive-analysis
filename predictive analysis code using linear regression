# Predictive Analysis using Linear Regression
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt

# 1. Create sample dataset
data = {
    'Advertising_Budget': [1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500, 5000, 6000],
    'Sales_Revenue':      [8000, 9000, 9500, 11000, 12000, 12500, 14000, 15000, 16000, 18000]
}
df = pd.DataFrame(data)

# 2. Define features (X) and target (y)
X = df[['Advertising_Budget']]
y = df['Sales_Revenue']

# 3. Split dataset into training and testing
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 4. Create and train the Linear Regression model
model = LinearRegression()
model.fit(X_train, y_train)

# 5. Make predictions
y_pred = model.predict(X_test)

# 6. Print evaluation metrics
print("Mean Squared Error:", mean_squared_error(y_test, y_pred))
print("R-squared Score:", r2_score(y_test, y_pred))

# 7. Predict new value
new_budget = [[5500]]
predicted_sales = model.predict(new_budget)
print("Predicted Sales for 5500 budget:", predicted_sales[0])

# 8. Plot the results
plt.scatter(X, y, color='blue', label='Actual')
plt.plot(X, model.predict(X), color='red', label='Regression Line')
plt.xlabel("Advertising Budget")
plt.ylabel("Sales Revenue")
plt.title("Sales Prediction using Linear Regression")
plt.legend()
plt.grid(True)
plt.show()
